################################################################################
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
# limitations under the License.
################################################################################


#==============================================================================
# Common
#==============================================================================

jobmanager.rpc.address: <%= @jobmanager_ip %>

jobmanager.rpc.port: <%= node.flink.jobmanager.rpc_port %>

jobmanager.heap.mb: <%= node.flink.jobmanager.heap_mbs %>

taskmanager.heap.mb: <%= node.flink.taskmanager.heap_mbs %>

taskmanager.num_taskslots: <%= node.flink.taskmanager.num_taskslots %>

parallelization.degree.default: <%= node.flink.parallelization.degree %>

#==============================================================================
# Web Frontend
#==============================================================================

jobmanager.web.port: <%= node.flink.jobmanager.web_port %>

webclient.port: <%= node.flink.webclient_port %>

#==============================================================================
# Streaming state checkpointing
#==============================================================================

# The backend that will be used to store operator state checkpoints if 
# checkpointing is enabled. 
#
# Supported backends: jobmanager, filesystem

state.backend: jobmanager

# Directory for storing checkpoints in a flink supported filesystem
# Note: State backend must be accessible from the JobManager, use file://
# only for local setups. 
#
state.backend.fs.checkpointdir: hdfs://user/<%= node.flink.user %>/checkpoints 


#==============================================================================
# Advanced
#==============================================================================

env.pid.dir = <%= node.flink.pid_dir %>

# The number of buffers for the network stack.
#
taskmanager.network.numberOfBuffers: <%= node.flink.taskmanager.network_num_buffers %>

# Directories for temporary files.
#
# Add a delimited list for multiple directories, using the system directory
# delimiter (colon ':' on unix) or a comma, e.g.:
#     /data1/tmp:/data2/tmp:/data3/tmp
#
# Note: Each directory entry is read from and written to by a different I/O
# thread. You can include the same directory multiple times in order to create
# multiple I/O threads against that directory. This is for example relevant for
# high-throughput RAIDs.
#
# If not specified, the system-specific Java temporary directory (java.io.tmpdir
# property) is taken.
#
taskmanager.tmp.dirs: /tmp

# Path to the Hadoop configuration directory.
#
# This configuration is used when writing into HDFS. Unless specified otherwise,
# HDFS file creation will use HDFS default settings with respect to block-size,
# replication factor, etc.
#
# You can also directly specify the paths to hdfs-default.xml and hdfs-site.xml
# via keys 'fs.hdfs.hdfsdefault' and 'fs.hdfs.hdfssite'.
#
fs.hdfs.hadoopconf: <%= node.hops.conf_dir %>
